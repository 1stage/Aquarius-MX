USB BASIC Documentation

Generated by makedoc.py

DOKE Statement - Write 16 bit word to Memory Location(s

FORMAT: DOKE <address>, <word>

Action: Writes <word> to memory starting <address>.

EXAMPLES of DOKE Statement:

  DOKE 14340,1382                   Set USR() function address


POKE Statement - Write to Memory Location(s)

FORMAT: POKE <address>, <byte> [,<byte>...] [,STEP count, <byte>...]
        POKE <address> TO <address>, <byte>

Action: Writes <byte>s to memory starting at <address>.

EXAMPLES of POKE Statement:

  POKE $3000+500,64                 Display '@' at screen center
  POKE 12347,7,6                    Display double-ended arrow
  POKE 12366,$13,STEP 39,$14        Display standing person "sprite"
  POKE 12329,$D4,STEP 1023,$10      Display red heart on black background

  POKE $3400 TO $3427,5             Set border color to magenta.
  POKE $3028 TO $33E7,$86           Fill screen with checkerboard character


COPY Statement - Copy Memory

FORMAT: COPY <source>, <dest>, <count>


EXAMPLES of COPY Statement:

  COPY 12368,12328,920              Scroll Screen Up One Line
  COPY 12288,12328,920              Scroll Screen Down One Line
  COPY 12329,12328,39               Scroll Row 1 right 1 char
  COPY $3000,$2000,2048             Copy Screen and Colors to Low RAM
  COPY $2000,$3000,2048             Restore Screen and Colors


CLS Statement - Clear Screen

FORMAT: CLS [<colors>]

Action: Clears the screen. The optional parameter <colors> is a number
between 0 and 255 that specifies the new foreground and background color
combination using this formula with the values below:  (FG * 16) + BG.
The default combination is 6 (BLACK on CYAN).

    0 BLACK      4 BLUE        8 GREY         12 LTYELLOW
    1 RED        5 MAGENTA     9 DKCYAN       13 DKGREEN
    2 GREEN      6 CYAN        10 DKMAGENTA   14 DKRED
    3 YELLOW     7 WHITE       11 DKBLUE      15 DKGREY

  The colors value can be represented as a two-digit hexadecimal number
(preceded by a $ as a hex number designator) where the left digit is the
foreground color and the right digit is the background color, using the
following chart:

    0 BLACK      4 BLUE        8 GREY        C LTYELLOW
    1 RED        5 MAGENTA     9 DKCYAN      D DKGREEN
    2 GREEN      6 CYAN        A DKMAGENTA   E DKRED
    3 YELLOW     7 WHITE       B DKBLUE      F DKGREY

Warning: If the foreground and background colors are the same, typed and
and PRINTed text will be invisible.

Advanced: Unlike PRINT CHR$(11), CLS does not clear memory locations
13288 - 13313 ($33E8 - $33FF) and 14312 - 14355 ($37E8 - $37FF).
EXAMPLES of POKE Statement:

  CLS               Clear screen with default colors
  CLS 7             Clear screen - black text on white background
  CLS $30           Clear screen - yellow text on black background
  CLS F*16+B        Clear screen - text color F, background color B
                                   (using BASIC variables)


OUT Statement - Write to Z80 I/O Port

FORMAT: OUT <address>,<byte>

Action: Writes <byte> to the I/O port specified by LSB of <address>.

Advanced: During the write, <address> is put on the Z80 address bus.
        .

EXAMPLES of OUT Statement:

  !!!TODO


Extended PEEK() Function - Read from Memory

FORMAT: PEEK(<address>)

Action: Reads a byte from memory location <address>.


EXAMPLES of PEEK Function:

  !!!TODO


DEEK() Function - Read 16 bit word from Memory

FORMAT: DEEK(<address>)

Action: Reads a word from memory location <address>.


EXAMPLES of DEEK Function:

  !!!TODO


IN() Function - Read Z80 I/O Port

FORMAT: IN(<address>)

Action: Reads a byte from the I/O port specified by LSB of <address>.

Advanced: During the read, <address> is put on the Z80 address bus.
        .

EXAMPLES of IN Function:

  PRINT IN(252)     (Prints cassette port input status)
  S=IN(254)         (Set S to Printer Ready status)


EXPERIMENTAL!

KEY() Function

Format: KEY(<number>)

Action: Checks for a key press and returns the ASCII code of the key.
        Returns after the keyboard is polled <number> times, or a key
        is pressed, whichever comes first, returning 0 if no key was
        pressed. KEY(0) does not return until a key is pressed.

        Note: Ctrl-C will not break out of an executing call to the
        KEY() function, but will still break out of the BASIC program
        if pressed between calls to KEY().

EXAMPLES of KEY Function:

  !!!TODO



DEC() Function

Format: DEC(<string>)

Action: Returns the DECimal value of the hexadecimal number in <string>.
        If the first non-blank character of the string is not a decimal
        digit or the letters A through F, the value returned is zero.
        String conversion is finished when the end of the string or any
        character that is not a hexadecimal digit is found.

EXAMPLES of DEC Function:




HEX$() Function

Format: HEX$(<number>)

Action: Returns string containing <number> in hexadecimal format.
        FC Error if <number> is not in the range -32676 through 65535.

EXAMPLES of HEX Function:

  PRINT HEX$(1)  !!!TODO


DTM$ Function

Format: DTM$(<number>)

Action: If a Real Time Clock is installed:
           if <number> is 0, returns a DateTime string "YYMMDDHHmmsscc"
           otherwise returns formatted times string "YYYY-MM-DD HH:mm:ss"
        Returns "" if a Real Time Clock is not detected.

EXAMPLES of DTM$ Function:

  PRINT DTM$(0)                    38011903140700
  PRINT DTM$(1)                    2038-01-19 03:14:07

  PRINT LEFT$(DTM$(1),10)          2038-01-19
  PRINT RIGHT$(DTM$(1),8)          03:14:07
  PRINT MID$(DTM$(1),6,11)         01-19 03:14


DEF FN Statement - Define User Function

FORMAT: DEF FN <name> ( <variable> ) = <expression>

Action: This sets up a user-defined function that can be used later in
the program. The function can consist of any mathematical formula.
User-defined functions save space in programs where a long formula is
used in several places. The formula need only be specified once, in the
definition statement, and then it is abbreviated as a function name. It
must be executed once, but any subsequent executions are ignored.
  The function name is the letters FN followed by any variable name.
This can be 1 or 2 characters, the first being a letter and the second a
letter or digit.
  The parametern <variable> represents the argument variable or value
that will be given in the function call and does not affect any program
variable with the same name. For any other variable name in <expression>,
the value of that program variable is used.
  A DEF FN statement must be executed before the function it defines may
be called. If a function is called before it has been defined, an
"Undefined user function" error occurs.
  Multiple user functions may be defined at once, each with a unique FN
name. Executing a DEF with the same FN name as a previously defined user
function replaces the previous definition with the new one. DEF FN is
illegal in direct mode.

EXAMPLES of DEF FN Statement:

  10 DEF FN A(X)=X+7

  20 DEF FN AA(X)=Y*Z

  30 DEF FN A9(Q) = INT(RND(1)*Q+1)

  The function is called later in the program by using the function name
with a variable in parentheses. This function name is used like any other
variable, and its value is automatically calculated,

EXAMPLES of FN Use:

  40 PRINT FN A(9)

  50 R=FN AA(9)

  60 G=G+FN A9(10)

  In line 50 above, the number 9 inside the parentheses does not affect
the outcome of the function, because the function definition in line 20
doesn't use the variable in the parentheses. The result is Y times Z,
regardless of the value of X. In the other two functions, the value in
parentheses does affect the result.


ATN Function - Arctangent

FORMAT: ATN ( <number> )

Action: This mathematical function returns the arctangent of the
number. The result is the angle (in radians) whose tangent is the number
given. The result is always in the range -pi/2 to +pi/2.

EXAMPLES of ATN Function:

  10 PRINT ATN(0)
  20 X = ATN(J)*180/ {pi} : REM CONVERT TO DEGREES

